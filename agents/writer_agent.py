from struct import Struct
from langchain_core.tools import BaseTool
from pydantic import BaseModel, Field
from typing import Dict, List, Any, Type
import json
from datetime import datetime


class WriterInput(BaseModel):
    comparison_results: Dict[str, Any] = Field(
        description="Results from CV comparison with ranked candidates"
    )
    evaluation_criteria: Dict[str, int] = Field(
        description="Evaluation criteria used for scoring"
    )
    position_title: str = Field(description="Job position title")
    client_name: str = Field(
        default="Client", description="Client name for personalization"
    )


class WriterAgent(BaseTool):
    """A simple agent for writing final synthesis reports with top candidate recommendations."""

    name: str = "report_writer"
    description: str = (
        "Generate final synthesis report with top 3 candidate recommendations"
    )
    args_schema: Type[BaseModel] = WriterInput

    def _run(
        self,
        comparison_results: Dict[str, Any],
        evaluation_criteria: Dict[str, int],
        position_title: str,
        client_name: str = "Client",
    ) -> str:
        """
        Generate final synthesis report with recommendations
        """
        ranked_candidates = comparison_results.get("ranked_candidates", [])
        comparison_table = comparison_results.get("comparison_table", "")

        # Get top 3 candidates
        top_3_candidates = ranked_candidates[:3]

        # Generate the report
        report = self._generate_report_structure(
            top_3_candidates,
            comparison_table,
            evaluation_criteria,
            position_title,
            client_name,
        )

        return report

    def _generate_report_structure(
        self,
        top_candidates: List[Dict],
        comparison_table: str,
        criteria: Dict[str, int],
        position: str,
        client: str,
    ) -> str:
        """Generate structured report with executive summary and recommendations"""

        report_date = datetime.now().strftime("%B %d, %Y")

        report = f"""# CV Analysis Report - {position}

            **Client:** {client}  
            **Position:** {position}  
            **Date:** {report_date}  
            **Candidates Evaluated:** {len(comparison_table.split('|')) // 6 if comparison_table else 0}

            ---

            ## Executive Summary

            We have completed the analysis of candidates for the **{position}** position. Based on our evaluation criteria, we present the complete comparison results and detailed recommendations for the top 3 candidates.

            ### Evaluation Criteria Used:
            {self._format_criteria_summary(criteria)}

            ---

            ## Complete Comparison Results

            {comparison_table}

            ---

            ## Top 3 Candidate Recommendations

            {self._generate_top_3_analysis(top_candidates, position)}

            ---

            ## Recommendations

            ### Immediate Actions:
            1. **Schedule interviews** with the top 3 candidates in priority order
            2. **Conduct technical assessments** to validate skills claims
            3. **Check references** for the recommended candidates

            ### Interview Focus Areas:
            {self._generate_interview_focus(criteria)}

            ---

            ## Conclusion

            Based on our comprehensive analysis, we recommend proceeding with interviews for the top 3 candidates. Each brings unique strengths that align well with the {position} requirements.

            **Next Steps:**
            - Contact candidates for interview scheduling
            - Prepare technical assessment materials
            - Conduct reference checks for finalists

            ---

            *Report generated by CV Comparator System*  
            *For questions or clarifications, please contact the evaluation team.*
        """

        return report

    def _format_criteria_summary(self, criteria: Dict[str, int]) -> str:
        """Format criteria into a readable summary"""
        criteria_list = []
        for criterion, weight in criteria.items():
            formatted_name = criterion.replace("_", " ").title()
            criteria_list.append(f"- **{formatted_name}**: {weight}%")

        return "\n".join(criteria_list)

    def _generate_top_3_analysis(
        self, top_candidates: List[Dict], position: str
    ) -> str:
        """Generate detailed analysis for top 3 candidates"""

        if not top_candidates:
            return "No candidates available for analysis."

        analyses = []

        for i, candidate in enumerate(top_candidates, 1):
            name = candidate.get("name", f"Candidate {i}")
            total_score = candidate.get("total_score", 0)
            percentage = candidate.get("percentage", 0)
            scores = candidate.get("scores", {})

            # Identify strengths (scores above average)
            strengths = []
            weaknesses = []
            avg_score = total_score / len(scores) if scores else 0

            for criterion, score in scores.items():
                criterion_name = criterion.replace("_", " ").title()
                if score > avg_score:
                    strengths.append(f"{criterion_name} ({score:.1f})")
                elif score < avg_score * 0.7:  # Below 70% of average
                    weaknesses.append(f"{criterion_name} ({score:.1f})")

            # Generate recommendation
            recommendation = self._generate_candidate_recommendation(
                i, total_score, percentage
            )

            analysis = f"""### #{i} - {name}
                **Overall Score:** {total_score:.1f}/100 ({percentage:.1f}%)

                **Key Strengths:**
                {chr(10).join([f'- {strength}' for strength in strengths]) if strengths else '- Well-rounded profile across all criteria'}

                **Areas for Validation:**
                {chr(10).join([f'- {weakness}' for weakness in weaknesses]) if weaknesses else '- No significant concerns identified'}

                **Recommendation:** {recommendation}

                **Interview Priority:** {'High' if i == 1 else 'Medium' if i == 2 else 'Standard'}

                ---
            """

            analyses.append(analysis)

        return "\n".join(analyses)

    def _generate_candidate_recommendation(
        self, rank: int, score: float, percentage: float
    ) -> str:
        """Generate specific recommendation for each candidate"""

        if rank == 1:
            if percentage >= 80:
                return "**Strongly Recommended** - Excellent match for the position with outstanding qualifications."
            elif percentage >= 70:
                return "**Highly Recommended** - Very good fit with strong qualifications across key areas."
            else:
                return "**Recommended** - Good candidate with solid foundation, some areas may need development."

        elif rank == 2:
            if percentage >= 75:
                return (
                    "**Recommended** - Strong second choice with excellent potential."
                )
            elif percentage >= 65:
                return "**Consider for Interview** - Good alternative candidate with solid qualifications."
            else:
                return "**Backup Candidate** - Acceptable option if top candidates are unavailable."

        else:  # rank == 3
            if percentage >= 70:
                return (
                    "**Consider for Interview** - Solid third option worth evaluating."
                )
            elif percentage >= 60:
                return "**Backup Option** - Reasonable candidate for broader consideration."
            else:
                return "**Reserve Candidate** - Consider if candidate pool needs expansion."

    def _generate_interview_focus(self, criteria: Dict[str, int]) -> str:
        """Generate interview focus areas based on evaluation criteria"""

        # Sort criteria by weight to prioritize interview focus
        sorted_criteria = sorted(criteria.items(), key=lambda x: x[1], reverse=True)

        focus_areas = []
        for criterion, weight in sorted_criteria[:4]:  # Top 4 criteria
            criterion_name = criterion.replace("_", " ").title()
            focus_areas.append(
                f"- **{criterion_name}** ({weight}%): Deep dive into specific examples and practical applications"
            )

        return "\n".join(focus_areas)
