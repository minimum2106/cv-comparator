from typing import Dict, Type
from datetime import datetime

from langchain_core.tools import BaseTool
from pydantic import BaseModel, Field


class WriterInput(BaseModel):
    comparison_results: str = Field(
        description="""
        Textual representation of the comparison table
        """
    )
    evaluation_criteria: Dict[str, str] = Field(
        description="""
            Evaluation criteria with either 'must have' or 'nice to have' 
            (e.g., {'Have experience working in startups': 'must have', 
                    'Machine Learning experience': 'nice to have', 
                    'Bachelor degree in Computer Science': 'must have', 
                    'AWS cloud experience': 'nice to have',
                    'Leadership experience': 'nice to have',
                    'French language skills': 'must have',
            })
        """
    )

class WriterAgent(BaseTool):
    """A simple agent for compiling and returning a final synthesis report with top candidate recommendations."""

    name: str = "report_writer"
    description: str = (
        "Generate final synthesis report made with comparison results and evaluation criteria"
        "Return that report to the user"
    )
    args_schema: Type[BaseModel] = WriterInput
    return_direct: bool = True

    def _run(
        self,
        comparison_results: str,
        evaluation_criteria: Dict[str, str],
    ) -> str:
        """
        Generate final synthesis report with recommendations
        """
        try:
            top_candidates_comparison_results = self._get_top_candidates(
                comparison_results
            )

            # Generate the report
            report = self._generate_report_structure(
                top_candidates_comparison_results,
                evaluation_criteria,
            )

            return report

        except Exception as e:
            print(f"Error generating report: {e}")

    def _generate_report_structure(
        self,
        comparison_table: str,
        criteria: Dict[str, str],
    ) -> str:
        """Generate structured report with executive summary and recommendations"""

        report_date = datetime.now().strftime("%B %d, %Y")

        report = f"""# CV Analysis Report - 

            **Date:** {report_date}  
            **Candidates Evaluated:** {len(comparison_table.split('|')) // 6 if comparison_table else 0}

            ---

            ## Executive Summary

            We have completed the analysis of candidates based on the job brief. 
            Based on our evaluation criteria, we present the complete comparison results and detailed recommendations for the top 3 candidates.

            ### Evaluation Criteria Used:
            {self._format_criteria_summary(criteria)}

            ---

            ## Complete Comparison Results
            {comparison_table}

            ---

            ## Recommendations

            ### Immediate Actions:
            1. **Schedule interviews** with the top 3 candidates in priority order
            2. **Conduct technical assessments** to validate skills claims
            3. **Check references** for the recommended candidates

            ### Interview Focus Areas:
            {self._generate_interview_focus(criteria)}

            ---

            ## Conclusion

            Based on our comprehensive analysis, we recommend proceeding with interviews for the top 3 candidates. Each brings unique strengths that align well with the requirements.

            **Next Steps:**
            - Contact candidates for interview scheduling
            - Prepare technical assessment materials
            - Conduct reference checks for finalists

            ---

            *Report generated by CV Comparator System*  
            *For questions or clarifications, please contact the evaluation team.*
        """

        return report

    def _format_criteria_summary(self, criteria: Dict[str, int]) -> str:
        """Format criteria into a readable summary"""
        criteria_list = []
        for criterion, weight in criteria.items():
            formatted_name = criterion.replace("_", " ").title()
            criteria_list.append(f"- **{formatted_name}**: {weight}%")

        return "\n".join(criteria_list)

    def _generate_interview_focus(self, criteria: Dict[str, int]) -> str:
        """Generate interview focus areas based on evaluation criteria"""

        # Sort criteria by weight to prioritize interview focus
        sorted_criteria = sorted(criteria.items(), key=lambda x: x[1], reverse=True)

        focus_areas = []
        for criterion, weight in sorted_criteria[:4]:  # Top 4 criteria
            criterion_name = criterion.replace("_", " ").title()
            focus_areas.append(
                f"- **{criterion_name}** ({weight}%): Deep dive into specific examples and practical applications"
            )

        return "\n".join(focus_areas)

    def _get_top_candidates(self, comparison_results: str) -> str:
        """Extract top 3 candidates from the comparison results table"""
        lines = comparison_results.split("\n")
        print(len(lines))

        # Find header, separator, and first 3 data rows
        result_lines = []
        data_count = 0

        for line in lines:
            # Always include header (contains "Rank")
            if "Rank" in line and "Filename" in line:
                print("Including header")
                result_lines.append(line)
            # Always include separator line (contains only |, -, :, and spaces)
            elif line.strip() and all(c in "|-: " for c in line.strip()):
                
                result_lines.append(line)
            # Include only first 3 data rows
            elif line.strip().startswith("|") and data_count < 3:
                print("Including data row")
                result_lines.append(line)
                data_count += 1

        return "\n".join(result_lines)
